/*
 * JPEG Sawmill - A viewer for JPEG progressive scans
 * Copyright (C) 2024  Rob Cowsill
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "jpeg_inspector.h"
#include "littletest.hpp"
#include <vector>

#define COUNT_OF(array) (sizeof(array) / sizeof(array[0]))


LT_BEGIN_SUITE(all_tests)
LT_END_SUITE(all_tests)


// Should always return length if buffer pointer is invalid
LT_BEGIN_AUTO_TEST(all_tests, should_ignore_bad_buffer)
    const uint8_t* noBuffer = nullptr;

    LT_ASSERT_EQ(::getScanEndOffset(0, noBuffer, 0), 0)
    LT_ASSERT_EQ(::getScanEndOffset(4, noBuffer, 4), 4)
    LT_ASSERT_EQ(::getScanEndOffset(0, noBuffer, 8), 8)
LT_END_AUTO_TEST(should_ignore_bad_buffer)

// Should return length if array is empty or start offset is out of bounds
LT_BEGIN_AUTO_TEST(all_tests, should_ignore_empty_buffer)
    const uint8_t buffer[] = { 0xFF, 0xD8, 0xFF, 0xC2, 0x00, 0x02, 0xFF, 0xDA, 0x00, 0x02, 0xFF, 0xD9 };

    LT_ASSERT_EQ(::getScanEndOffset(0, buffer, 0), 0)
    LT_ASSERT_EQ(::getScanEndOffset(-1, buffer, COUNT_OF(buffer)), COUNT_OF(buffer))
    LT_ASSERT_EQ(::getScanEndOffset(COUNT_OF(buffer), buffer, COUNT_OF(buffer)), COUNT_OF(buffer))
    LT_ASSERT_EQ(::getScanEndOffset(COUNT_OF(buffer) + 1, buffer, COUNT_OF(buffer)), COUNT_OF(buffer))
LT_END_AUTO_TEST(should_ignore_empty_buffer)

// Should return length if a JPEG is truncated
LT_BEGIN_AUTO_TEST(all_tests, should_ignore_truncated_buffer)
    const uint8_t buffer[] = { 0xFF, 0xD8, 0xFF, 0xDA, 0x00, 0x02, 0xFF, 0xC2, 0x00, 0x02 };

    LT_ASSERT_EQ(::getScanEndOffset(0, buffer, 3), 3)
    LT_ASSERT_EQ(::getScanEndOffset(0, buffer, 7), 7)
LT_END_AUTO_TEST(should_ignore_truncated_buffer)

// Should return length for any non-JPEG files
LT_BEGIN_AUTO_TEST(all_tests, should_ignore_non_jpeg)
    const uint8_t buffer[] = { 0x51, 0x76, 0xF5, 0x43, 0xFF, 0xC2, 0x00, 0x02, 0xFF, 0xDA, 0x00, 0x02, 0xFF, 0xDA, 0x00, 0x02 };

    LT_ASSERT_EQ(::getScanEndOffset(0, buffer, COUNT_OF(buffer)), COUNT_OF(buffer))
LT_END_AUTO_TEST(should_ignore_non_jpeg)

// Should iterate through expected set of scan offsets
LT_BEGIN_AUTO_TEST(all_tests, should_scan_through_buffer)
    const uint8_t buffer[] =
    {
        0xFF, 0xD8, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x06, 0xFF, 0xFF, 0x99, 0x99, 0xFF, 0xDA, 0x00, 0x02,
        0xFD, 0xFE, 0xFF, 0x00, 0x01, 0xFF, 0xD9
    };

    int32_t offset = ::getScanEndOffset(0, buffer, COUNT_OF(buffer));
    LT_ASSERT_EQ(offset, COUNT_OF(buffer) - 2)

    offset = ::getScanEndOffset(offset, buffer, COUNT_OF(buffer));
    LT_ASSERT_EQ(offset, COUNT_OF(buffer))

    offset = ::getScanEndOffset(offset, buffer, COUNT_OF(buffer));
    LT_ASSERT_EQ(offset, COUNT_OF(buffer))
LT_END_AUTO_TEST(should_scan_through_buffer)

// Should find all scan endpoints in sample JPEG buffer
LT_BEGIN_AUTO_TEST(all_tests, should_scan_real_buffer)
    const uint8_t buffer[] =
    {
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x01, 0x2C,
        0x01, 0x2C, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,
        0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x03, 0x02, 0x02, 0x02, 0x02, 0x05, 0x04,
        0x04, 0x03, 0x04, 0x06, 0x05, 0x06, 0x06, 0x06, 0x05, 0x06, 0x06, 0x06, 0x07, 0x09, 0x08, 0x06,
        0x07, 0x09, 0x07, 0x06, 0x06, 0x08, 0x0B, 0x08, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x06, 0x08,
        0x0B, 0x0C, 0x0B, 0x0A, 0x0C, 0x09, 0x0A, 0x0A, 0x0A, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x02, 0x02,
        0x02, 0x02, 0x02, 0x02, 0x05, 0x03, 0x03, 0x05, 0x0A, 0x07, 0x06, 0x07, 0x0A, 0x0A, 0x0A, 0x0A,
        0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
        0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
        0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0xFF, 0xC2,
        0x00, 0x11, 0x08, 0x00, 0x10, 0x00, 0x10, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11,
        0x01, 0xFF, 0xC4, 0x00, 0x16, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x07, 0x08, 0xFF, 0xC4, 0x00, 0x15, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05,
        0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x10, 0x03, 0x10, 0x00, 0x00, 0x01, 0x64, 0x5C,
        0x83, 0x3E, 0x29, 0xFF, 0x00, 0xFF, 0xC4, 0x00, 0x18, 0x10, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x16, 0x18, 0xFF,
        0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, 0x01, 0x05, 0x02, 0x35, 0x1D, 0x08, 0x7F, 0x1F, 0xFF, 0xC4,
        0x00, 0x1F, 0x11, 0x00, 0x00, 0x04, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x05, 0x11, 0x12, 0x00, 0x01, 0x13, 0x15, 0x31, 0x41, 0x51, 0x61, 0xFF,
        0xDA, 0x00, 0x08, 0x01, 0x03, 0x01, 0x01, 0x3F, 0x01, 0x30, 0x3F, 0xBE, 0x80, 0x02, 0xA6, 0xC6,
        0xAE, 0xD7, 0x29, 0xE4, 0xB9, 0x1F, 0xFF, 0xC4, 0x00, 0x20, 0x11, 0x00, 0x00, 0x02, 0x0B, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x11, 0x00, 0x01, 0x03,
        0x04, 0x06, 0x12, 0x13, 0x16, 0x31, 0x61, 0x81, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x02, 0x01, 0x01,
        0x3F, 0x01, 0x14, 0x37, 0x6D, 0xBC, 0x8D, 0x95, 0x59, 0xCF, 0x45, 0x8E, 0xAD, 0x3F, 0xFF, 0xC4,
        0x00, 0x21, 0x10, 0x00, 0x00, 0x04, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x12, 0x13, 0x14, 0x01, 0x02, 0x10, 0x15, 0x16, 0x36, 0x61, 0x65, 0x82,
        0x83, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, 0x06, 0x3F, 0x02, 0x1A, 0xE7, 0x3E, 0x75, 0xC6,
        0x5A, 0x98, 0x97, 0xCE, 0x2A, 0x9C, 0xDD, 0x53, 0xDC, 0x4D, 0x4F, 0xFF, 0xC4, 0x00, 0x19, 0x10,
        0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xF0, 0x00, 0x10, 0x11, 0x21, 0x61, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, 0x01, 0x3F, 0x21,
        0x9D, 0x45, 0xC3, 0x85, 0x39, 0xBF, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x10, 0xA7, 0xFF, 0xC4, 0x00, 0x18, 0x11, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x71, 0x91, 0xB1, 0xFF,
        0xDA, 0x00, 0x08, 0x01, 0x03, 0x01, 0x01, 0x3F, 0x10, 0xDB, 0xA3, 0xA0, 0x52, 0x6C, 0xFF, 0xC4,
        0x00, 0x19, 0x11, 0x00, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x21, 0x41, 0x00, 0x11, 0x51, 0x31, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x02, 0x01,
        0x01, 0x3F, 0x10, 0xC8, 0x59, 0xE6, 0x49, 0xF7, 0xB3, 0xFF, 0xC4, 0x00, 0x1D, 0x10, 0x00, 0x01,
        0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11,
        0x31, 0xF0, 0x00, 0x10, 0x41, 0x71, 0x81, 0xD1, 0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, 0x01,
        0x3F, 0x10, 0x20, 0x02, 0xA0, 0x26, 0x6A, 0x2E, 0x96, 0xBA, 0x5A, 0xDD, 0xFD, 0xB7, 0xFF, 0xD9
    };

    const std::vector<uint16_t> expectedScanEndOffsets =
    {
        0x00F5, 0x011E, 0x0156, 0x018E, 0x01CB, 0x01F6, 0x0205, 0x022E, 0x0259, 0x028E, 0x0290
    };

    std::vector<uint16_t> actualScanEndOffsets;

    int32_t offset = 0;
    while (static_cast<uint32_t>(offset) < COUNT_OF(buffer))
    {
        offset = ::getScanEndOffset(offset, buffer, COUNT_OF(buffer));
        LT_ASSERT_GT(offset, 0)
        actualScanEndOffsets.push_back(offset);
    }

    LT_ASSERT_EQ(actualScanEndOffsets.size(), expectedScanEndOffsets.size())
    LT_ASSERT_COLLECTIONS_EQ(actualScanEndOffsets.begin(), actualScanEndOffsets.end(), expectedScanEndOffsets.begin())
LT_END_AUTO_TEST(should_scan_real_buffer)


LT_BEGIN_AUTO_TEST_ENV()
    AUTORUN_TESTS()
LT_END_AUTO_TEST_ENV()
